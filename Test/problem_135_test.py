## testcase file for Lettcode problem 135
## author MDomalewski, generated by TypicalUsername-ai's leetcode python repository
## created on: 2022-07-04 14:11:36.073049

## import Structures ##uncomment if the task requires a non-basic data structure
import unittest
from Solutions import problem_135

class Problem_135_test(unittest.TestCase):
    def setUp(self):
        self.solution = problem_135.Solution()

    # @unittest.skip
    def test_case1(self):
        self.assertEqual(self.solution.candy([1,0,2]), 5, "[1,0,2] => 5")
    # @unittest.skip
    def test_case2(self):
        self.assertEqual(self.solution.candy([1,2,2]), 4, "[1,2,2] => 4")
    # @unittest.skip
    def test_case3(self):
        self.assertEqual(self.solution.candy([]), 0, "[] => 0")
    # @unittest.skip
    def test_case4(self):
        self.assertEqual(self.solution.candy([1]), 1, "single child gets one candy")
    # @unittest.skip
    def test_case5(self):
        self.assertEqual(self.solution.candy([1,3,2,2,1]), 7, "first failed leet case")
    # @unittest.skip 
    def test_case6(self): 
        self.assertEqual(self.solution.candy([29,51,87,87,72,12]), 12, "second failed leet case")

    def test_case7(self):
        self.assertEqual(self.solution.candy([1,6,10,8,7,3,2]), 18, "third failed leet case")
    # @unittest.skip
    def test_case8(self):
        self.assertEqual(self.solution.candy([x for x in range(10, 0, -1)]), 55, "first strain case")
    # @unittest.skip
    def test_case9(self):
        self.assertEqual(self.solution.candy([x for x in range(100, 0, -1)]), 5050,"second strain case")
    # @unittest.skip
    def test_case10(self):
        self.assertEqual(self.solution.candy([x for x in range(5000, 0, -1)]), 5001 * 2500, "last strain case ?")
    

st = unittest.defaultTestLoader.loadTestsFromTestCase(Problem_135_test)
unittest.TextTestRunner().run(st)
