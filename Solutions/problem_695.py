## solution class for Lettcode problem 695
## author MDomalewski, generated by TypicalUsername-ai's leetcode python repository
## created on: 2022-07-15 12:51:57.218300
##import Structures #uncomment if the task requires a non-basic data structure
class Solution(object):
    def maxAreaOfIsland(self, grid: list[list[int]]) -> int:
        # first array is the y-coordinate array it's the columns
        # second <inner> array is the rows
        def explore(x: int, y: int, num: int):
            # we check if the land we're on is land (x,y == 1)
            # we call the same recusively for every plot of land we can find
            # every found ploy is then "sank" 1-> to avoid duplicating calculations
            if grid[x][y] != 1:
                return False
            else:
                grid[x][y] = num
                # print(f"land [{x},{y}] -> {num}")
                if x > 0:
                    explore(x-1, y, num)
                if y > 0:
                    explore(x, y-1, num)
                if x < len(grid) - 1:
                    explore(x+1, y, num)
                if y < len(grid[0]) - 1:
                    explore(x, y+1, num)
                return True

        nums = -1
        max_island = 0
        for x in range(len(grid)):
            for y in range(len(grid[0])):
                contend = explore(x,y, nums)
                if contend:
                    nums -= 1

        a_nums = [0 for n in range(-nums)]
        for subarr in grid:
            for num in range(-nums):
                a_nums[num] += subarr.count(-num -1)
        # print(f"islands_arr = {a_nums}")

        return max(a_nums)