## solution class for Lettcode problem 105
## author MDomalewski, generated by TypicalUsername-ai's leetcode python repository
## created on: 2022-07-14 10:25:52.775758
##import Structures #uncomment if the task requires a non-basic data structure
from Structures import TreeNode as tr
class Solution(object):
    def buildTree(self, preorder: list[int], inorder: list[int]):
        TreeNode = tr.TreeNode
        """
        :type preorder: List[int]
        :type inorder: List[int]
        :rtype: TreeNode
        """
        # preorder = root, left, right
        # inorder = left, root, right

        # need to RECURSIVELY  build tree from root then to children
        # preorder[0] will alway be the root
        # pre[0] will tell us the root
        # all before pre[0] in inorder will be left subtree
        # all after pre[0] will be right subtree
        def buildSubtree(subarr: list[int]) -> TreeNode:
            if len(preorder) == 0 or len(subarr)== 0:
                return
            val = preorder.pop(0)
            if len(subarr) == 1:
                # print(f"final insert {subarr[0]}, {val}")
                return TreeNode(subarr[0])
            else:
                node = TreeNode(val)
                p = subarr.index(val)
                # print(f"will index {val} from {subarr}, splitting to {subarr.copy()[0:p]}, {subarr.copy()[p+1:]}")
                node.left = buildSubtree(subarr.copy()[0:p])
                node.right = buildSubtree(subarr.copy()[p+1:])
                return node

        return buildSubtree(inorder)


